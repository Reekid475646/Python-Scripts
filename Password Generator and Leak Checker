import random
import string
import time
import sys
import hashlib
import requests
from zxcvbn import zxcvbn
from decimal import Decimal, DivisionImpossible, InvalidOperation, getcontext


getcontext().prec = 50

MAX_PASSWORD_LENGTH = 128  

def generate_password(security_level, length):
    if length > MAX_PASSWORD_LENGTH:
        print(f"Password length too large. Limiting to {MAX_PASSWORD_LENGTH} characters.")
        length = MAX_PASSWORD_LENGTH

    if security_level == 'low':
        characters = string.digits
    elif security_level == 'medium':
        characters = string.ascii_letters + string.digits
    elif security_level == 'high':
        characters = string.ascii_letters + string.digits + string.punctuation
    else:
        print("Invalid security level.")
        return None

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def convert_seconds(seconds):
    if seconds is None:
        return "Time calculation unavailable"

    try:
        
        seconds = Decimal(seconds)

        
        if seconds < 1:
            return f"{seconds * 1000:.0f} milliseconds"

        years, seconds = divmod(seconds, Decimal(31536000))
        days, seconds = divmod(seconds, Decimal(86400))
        hours, seconds = divmod(seconds, Decimal(3600))
        minutes, seconds = divmod(seconds, Decimal(60))

        parts = []
        if years > 0:
            parts.append(f"{int(years)} years")
        if days > 0:
            parts.append(f"{int(days)} days")
        if hours > 0:
            parts.append(f"{int(hours)} hours")
        if minutes > 0:
            parts.append(f"{int(minutes)} minutes")
        if seconds > 0 or not parts:
            parts.append(f"{seconds:.0f} seconds")

        return ', '.join(parts)
    except (DivisionImpossible, InvalidOperation):
        return "Cracking time estimation error"

def loading_animation(message, duration=2):
    print(message, end="")
    spinner = "|/-\\"
    for _ in range(duration * 10):
        for char in spinner:
            sys.stdout.write(char)
            sys.stdout.flush()
            time.sleep(0.1)
            sys.stdout.write("\r")  
    print(" " * len(message), end="\r")  

def check_password_strength(password):
    loading_animation("   Analyzing password strength... ")

    try:
        result = zxcvbn(password)
        strength_score = result['score']
        crack_times = result['crack_times_seconds']

        strength_levels = ["Very Weak", "Weak", "Moderate", "Strong", "Very Strong"]
        strength_description = strength_levels[strength_score]

        print("\nPassword Strength Analysis:")
        print(f"Strength: {strength_description}")
        print("Estimated time to crack password:")
        print(f"  Online attack (10 guesses per second): {convert_seconds(crack_times['online_no_throttling_10_per_second'])}")
        print(f"  Online attack (100 guesses per hour): {convert_seconds(crack_times['online_throttling_100_per_hour'])}")
        print(f"  Offline fast hash (10^10 guesses per second): {convert_seconds(crack_times['offline_fast_hashing_1e10_per_second'])}")
        print(f"  Offline slow hash (10^4 guesses per second): {convert_seconds(crack_times['offline_slow_hashing_1e4_per_second'])}")

        
        check_password_leak(password)

    except (DivisionImpossible, InvalidOperation):
        print("Error: Cracking time estimation failed due to large or complex password.")

def check_password_leak(password):
    
    sha1_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()

    
    prefix = sha1_hash[:5]
    suffix = sha1_hash[5:]

    try:
       
        response = requests.get(f"https://api.pwnedpasswords.com/range/{prefix}")
        response.raise_for_status()

        
        leaks = response.text.splitlines()
        for leak in leaks:
            if leak.startswith(suffix):
                leaked_count = leak.split(':')[1]
                print(f"\nWARNING: This password has been exposed in a breach! (Found {leaked_count} times)")
                return  

      
        print("\nThis password has NOT been exposed in any known breaches.")
    
    except requests.RequestException as e:
        print("\nError checking for password leaks. Please try again later.")
        print(f"Error details: {e}")

def main():
    print("Password Tool")
    print("Choose an option:")
    print("1. Generate a new password")
    print("2. Check the strength of an existing password")
    
    choice = input("Enter your choice (1/2): ")

    if choice == '1':
        print("Choose security level:")
        print("1. Low (Only digits)")
        print("2. Medium (Letters and digits)")
        print("3. High (Letters, digits, and special characters)")
        
        level_choice = input("Enter your choice (1/2/3): ")
        length = int(input("Enter password length (max 128): "))

        if level_choice == '1':
            security_level = 'low'
        elif level_choice == '2':
            security_level = 'medium'
        elif level_choice == '3':
            security_level = 'high'
        else:
            print("Invalid choice.")
            return

        password = generate_password(security_level, length)
        if password:
            print("\nGenerated Password:", password)
            check_password_strength(password)

    elif choice == '2':
        password = input("Enter the password you want to check: ")
        if len(password) > MAX_PASSWORD_LENGTH:
            print(f"Password is too long. Please enter a password up to {MAX_PASSWORD_LENGTH} characters.")
        else:
            check_password_strength(password)

    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Needed librarys:
pip install requests
pip install zxcvbn
